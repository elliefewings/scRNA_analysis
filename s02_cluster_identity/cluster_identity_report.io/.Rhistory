rm(i, data.meta, input_data, libs, initial.options)
dir.create(opt$output, showWarnings = FALSE)
rdata <- paste(opt$output, "/s01_qc_processing.Rdata", sep="")
save.image(rdata)
rdata
save.image(rdata)
rdata
opt$output <- NULL
if (is.null(opt$output)) {
opt$output <- paste(opt$input, "/pipeline_output", sep="")
}
rdata <- paste(opt$output, "/s01_qc_processing.Rdata", sep="")
save.image(rdata)
source(paste(script.dir, "/qc_processing_report.pdf/app.R", sep=""))
app <- shinyApp(ui = ui, server = server)
appshot(app,  paste(opt$output, "/", sample, ".qcprocessing.report.pdf", sep=""),  envvars = c(rdata = rdata), delay=10, port = getOption("shiny.port"), vwidth = 1500)
libs <- c("Seurat", "dplyr", "GetoptLong", "optparse", "magrittr", "stringr", "ggplot2", "webshot", "shiny", "gridExtra")
for (i in libs) {
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
install.packages(i)
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
stop(paste("Unable to install package: ", i, ". Please install manually and restart.", sep=""))
}
}
}
initial.options <- commandArgs(trailingOnly = FALSE)
script.dir <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis"
source("C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/source/source.R")
## Get options
option_list <- list(
make_option(c("--input", "-i"), action="store", default=NULL, type='character',
help="Path to sample directory containing results of cellranger count [required]"),
make_option(c("--output", "-o"), action="store", default=NULL, type='character',
help="Path to desired output directory [default = input]"),
make_option(c("--mincells", "-c"), action="store", default=3, type='integer',
help="Feature filter: Minimum number of cells expressing a feature for it to be included [default = 3]"),
make_option(c("--minfeatures", "-n"), action="store", default=200, type='integer',
help="Cell filter: Minimum number of features a cell should express [default = 200]"),
make_option(c("--maxfeatures", "-x"), action="store", default=2500, type='integer',
help="Cell filter: Maximum number of features a cell should express [default = 2500]"),
make_option(c("--maxpercentmt", "-m"), action="store", default=5, type='numeric',
help="Cell filter: Maximum percentage of mitochondrial features a cell should express [default = 5]")
)
opt <- parse_args(OptionParser(option_list=option_list))
opt$input <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/data/ERS2921927_20200806"
if (is.null(opt$input)) {
message("ERROR: Input missing, please specify input directory with --input, -i flags.")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
if (is.null(opt$output)) {
opt$output <- paste(opt$input, "/pipeline_output", sep="")
}
## Find filtered feature bc matrix directory
indir <- paste(opt$input, "/outs/filtered_feature_bc_matrix", sep="") %>% str_replace_all("/outs/filtered_feature_bc_matrix/outs/filtered_feature_bc_matrix", "/outs/filtered_feature_bc_matrix") %>% str_replace_all("/outs/filtered_feature_bc_matrix//outs/filtered_feature_bc_matrix", "/outs/filtered_feature_bc_matrix")
if (!file.exists(indir)) {
message(paste("ERROR: Input directory doesn't exist or doesn't contain cellranger output: ", indir, sep=""))
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
## Check other options
# Minimum number of cells per feature
if (!is.numeric(opt$mincells) | opt$mincells < 0 ) {
message("ERROR: Option --mincells/-c is not numeric or negative. Please supply a positive integer")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
if (opt$mincells > 10) {
warning("WARNING: Option --mincells/-c filter is HIGH, consider changing to a number less than 10")
}
if (opt$mincells < 1) {
warning("WARNING: Option --mincells/-c filter is LOW, consider changing to a number greater than 0")
}
# Minimum number of features per cell
if (!is.numeric(opt$minfeatures)) {
message("ERROR: Option --minfeatures/-n is not numeric")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
if (opt$minfeatures < 100) {
warning("WARNING: Option --minfeatures/-n filter is LOW, consider changing to a number greater than 100")
}
if (opt$minfeatures > 1000) {
warning("WARNING: Option --minfeatures/-n filter is HIGH, consider changing to a number less than 1000")
}
# Maximum number of features per cell
if (!is.numeric(opt$maxfeatures)) {
message("ERROR: Option --maxfeatures/-x is not numeric")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
if (opt$maxfeatures < 1000) {
warning("WARNING: Option --maxfeatures/-x filter is LOW, consider changing to a number greater than 1000")
}
if (opt$maxfeatures > 10000) {
warning("WARNING: Option --maxfeatures/-x filter is HIGH, consider changing to a number less than 10000")
}
if (opt$maxfeatures < opt$minfeatures) {
message("ERROR: Option --maxfeatures/-x is less than option --minfeatures/-n")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
# Maximum percentage of features from mitochondrial genes
if (!is.numeric(opt$maxpercentmt)) {
message("ERROR: Option --maxpercentmt/-m is not numeric")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
if (opt$maxpercentmt > 10) {
warning("WARNING: Option --maxfeatures/-x filter is HIGH, consider changing to a number less than 10")
}
if (opt$maxpercentmt < 2) {
warning("WARNING: Option --maxfeatures/-x filter is LOW, consider changing to a number greater than 1")
}
###############
## Load data ##
###############
# Infer sample name from directory name
sample <- indir %>% str_replace_all("/outs/filtered_feature_bc_matrix", "") %>% basename()
input_data <- Read10X(data.dir = indir)
# Create Seurat object using mincells filter
data <- CreateSeuratObject(counts = input_data,
project = sample,
min.cells = opt$mincells)
##############
## QC Plots ##
##############
# Find out how mitochrondrial genes are labelled (by selecting MT- with case insensitivity)
mt.patt <- rownames(data)[grepl("MT-", rownames(data), ignore.case = TRUE)] %>% gsub("-.*", "-", .) %>% unique()
# Create percent.mt metric
data[["percent.mt"]] <- PercentageFeatureSet(data, pattern = mt.patt)
# Create QC plots
qc1 <- VlnPlot(data, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, cols="grey")
qc2 <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "percent.mt", cols="steelblue4")
qc3 <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", cols="steelblue4")
# Subset meta data
data.meta <- data@meta.data
# Create summary table of meta data
data.meta.summ <- summarise(data.meta, ncells = length(orig.ident),
med_nCount_RNA = median(nCount_RNA),
min_nCount_RNA = min(nCount_RNA),
max_nCount_RNA = max(nCount_RNA),
med_nFeature_RNA = median(nFeature_RNA),
min_nFeature_RNA = min(nFeature_RNA),
max_nFeature_RNA = max(nFeature_RNA),
med_percent.mt = median(percent.mt),
min_percent.mt = min(percent.mt),
max_percent.mt = max(percent.mt)) %>% t() %>% as.data.frame()
colnames(data.meta.summ) <- "pre-filtering"
###############
## Filtering ##
###############
data <- data[,(data$nFeature_RNA >= opt$minfeatures) & (data$nFeature_RNA <= opt$maxfeatures) & (data$percent.mt < opt$maxpercentmt)]
# Subset meta data
data.meta <- data@meta.data
# Create summary table of meta data
data.meta.summ$'post-filtering' <- summarise(data.meta, ncells = length(orig.ident),
med_nCount_RNA = median(nCount_RNA),
min_nCount_RNA = min(nCount_RNA),
max_nCount_RNA = max(nCount_RNA),
med_nFeature_RNA = median(nFeature_RNA),
min_nFeature_RNA = min(nFeature_RNA),
max_nFeature_RNA = max(nFeature_RNA),
med_percent.mt = median(percent.mt),
min_percent.mt = min(percent.mt),
max_percent.mt = max(percent.mt)) %>% t()
# Create post filter QC plots
qc1.f <- VlnPlot(data, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, cols="lightskyblue3")
qc2.f <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "percent.mt", cols="steelblue4")
qc3.f <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", cols="steelblue4")
###################
## Normalisation ##
###################
# Normalise with default log transform and scale
data <- NormalizeData(data, verbose = FALSE)
#######################
## Variable Features ##
#######################
# Find variable features (can be adjusted if requested)
data <- FindVariableFeatures(data, selection.method = "vst", nfeatures = 2000, verbose = FALSE)
# Scale data on variable features (can be changed if requested)
data <- ScaleData(data, verbose = FALSE)
# Run PCA
data <- RunPCA(data, features = VariableFeatures(object = data), verbose = FALSE)
npcs <- get_npcs(seurat_object = data, create_plot = TRUE)
pca <- DimPlot(data, reduction = "pca")
#######################
## Clean up and Save ##
#######################
# Remove old data
rm(i, data.meta, input_data, libs, initial.options)
dir.create(opt$output, showWarnings = FALSE)
rdata <- paste(opt$output, "/s01_qc_processing.Rdata", sep="")
save.image(rdata)
source(paste(script.dir, "/qc_processing_report.pdf/app.R", sep=""))
app <- shinyApp(ui = ui, server = server)
appshot(app,  paste(opt$output, "/", sample, ".qcprocessing.report.pdf", sep=""),  envvars = c(rdata = rdata), delay=10, port = getOption("shiny.port"), vwidth = 1500)
webshot:::find_phantom()
gc()
libs <- c("Seurat", "dplyr", "GetoptLong", "optparse", "magrittr", "stringr", "ggplot2", "webshot", "shiny", "gridExtra")
for (i in libs) {
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
install.packages(i)
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
stop(paste("Unable to install package: ", i, ". Please install manually and restart.", sep=""))
}
}
}
gc()
rdata <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/data/ERS2921927_20200806/pipeline_output/s01_qc_processing.Rdata"
gc()
load(rdata)
gc()
library(pryr)
mem_used()
install.packages("pryr")
library(pryr)
mem_used()
library(pryr)
mem_used()
library(shiny)
library(ggplot2)
library(gridExtra)
library(Seurat)
library(stringr)
library(shinyBS)
library(magrittr)
library(pryr)
mem_used()
source("Saez/Pipeline/github/scRNA_analysis/qc_processing_report.io/source.R")
mem_used()
rdata <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/data/CK114/pipeline_output/s01_qc_processing.Rdata"
load(rdata)
mem_used()
ui <- shinyUI(fluidPage(theme= "button.css",
# Set style for vertical alignment
tags$head(tags$style(
HTML('
#vert {
display: flex;
align-items: center;
margin-top: 50px;
}
.tooltip .tooltip-inner {
max-width: 100%;
}
')),
tags$link(rel = "stylesheet", type = "text/css", href = "button.css")),
# Create Input
fileInput("file", 'Choose Rdata to upload',
accept = c('.Rdata')),
actionButton("load", "Generate report"),
bsTooltip("file", title="Select Rdata generated from pipeline, 's01_qc_processing.Rdata'", trigger="hover", placement = "bottom"),
# Application title
titlePanel(textOutput("title")),
fluidRow(tags$hr(style="border-color: black;")),
# Summary data
fluidRow(column(4, align="left", h3(tags$b("Script options"))), column(6, align="center", h3(tags$b("Quality Control Plots"))),
column(2, switchButton(inputId="filter", label = "Show Filtered Data", value = FALSE, col = "GB", type = "TF")
)),
fluidRow(column(4,
wellPanel(
uiOutput("input"),
uiOutput("inlong"),
uiOutput("output"),
uiOutput("outlong"),
uiOutput("mincells"),
uiOutput("minfeatures"),
uiOutput("maxfeatures"),
uiOutput("maxpercentmt")
),
wellPanel(align="center", tableOutput("sum"))),
column(8, align="right", id="vert", plotOutput("initQC", width="100%", height="600px"))),
# PCA plots
fluidRow(tags$hr(style="border-color: black;")),
fluidRow(column(5, align="center", h3(tags$b("Selection of Principle Components"))), column(5, align="center", h3(tags$b("Plotting Principle Components"))), column(2, textInput("gene", "Show feature:", ""), actionButton("search", "Search"))),
fluidRow(column(6, align="right", id="vert", plotOutput("npcs", width="80%", height="400px")), column(6, id="vert", align="left", plotOutput("pca", width="80%", height="400px"))),
fluidRow(tags$hr(style="border-color: black;"))
))
mem_used()
server <- shinyServer(function(input, output, session) {
# Load data
load_Rdata <- function(){
if(is.null(input$file)){return(NULL)}
rdata <- isolate({input$file})
load(rdata$datapath, envir = .GlobalEnv)
}
# Create event when report load button is activated
observeEvent(input$load,{
load_Rdata()
#Set text outputs
output$title <- renderText({paste("QC and Data Processing Report:", sample)})
inshort <- ifelse(nchar(opt$input) > 50,
substr(opt$input, nchar(opt$input)-50, nchar(opt$input)),
opt$input) %>% sub(".*?/", "/", .)
output$input <- renderText({HTML(paste("<b>","Input Directory:", "</b>", "...", inshort))})
output$inlong <- renderUI({
bsTooltip("input", title=opt$input, trigger="hover", placement = "bottom")
})
#Set long and short versions of output for tooltip
outshort <- ifelse(nchar(opt$output) > 50,
substr(opt$output, nchar(opt$output)-50, nchar(opt$output)),
opt$output) %>% sub(".*?/", "/", .)
output$output <- renderText({HTML(paste("<b>", "Output Directory:", "</b>", "...", outshort))})
output$outlong <- renderUI({
bsTooltip("output", title=opt$output, trigger="hover", placement = "bottom")
})
output$mincells <- renderText({HTML(paste("<b>", "Minimum Cells Filter:", "</b>", opt$mincells))})
output$minfeatures <- renderText({HTML(paste("<b>", "Minimum Features Filter:", "</b>", opt$minfeatures))})
output$maxfeatures <- renderText({HTML(paste("<b>", "Maximum Features Filter:", "</b>", opt$maxfeatures))})
output$maxpercentmt <- renderText({HTML(paste("<b>", "Maximum Percentage MT Filter:", "</b>", opt$maxpercentmt))})
#Set QC plots
plotselection <- reactive({
if (input$filter == FALSE) {
qc1.1 <- qc1[[1]] + theme(axis.title.x=element_blank(), axis.text.x=element_blank())
qc1.2 <- qc1[[2]] + theme(axis.title.x=element_blank(), axis.text.x=element_blank())
qc1.3 <- qc1[[3]] + theme(axis.title.x=element_blank(), axis.text.x=element_blank())
qc2 <- qc2 + theme(legend.position = "none") + labs(title = "Percentage mitochondrial features vs number of molecules detected")
qc3 <- qc3 + theme(legend.position = "none") + labs(title = "Number of unique features vs number of molecules detected")
plot <- grid.arrange(arrangeGrob(qc1.1, qc1.2, qc1.3, ncol=3), arrangeGrob(qc2, qc3, ncol=2), heights=c(2.5/4, 1.5/4), ncol=1)
} else {
qc1.1 <- qc1.f[[1]] + theme(axis.title.x=element_blank(), axis.text.x=element_blank())
qc1.2 <- qc1.f[[2]] + theme(axis.title.x=element_blank(), axis.text.x=element_blank())
qc1.3 <- qc1.f[[3]] + theme(axis.title.x=element_blank(), axis.text.x=element_blank())
qc2 <- qc2.f + theme(legend.position = "none") + labs(title = "Percentage mitochondrial features vs number of molecules detected")
qc3 <- qc3.f + theme(legend.position = "none") + labs(title = "Number of unique features vs number of molecules detected")
plot <- grid.arrange(arrangeGrob(qc1.1, qc1.2, qc1.3, ncol=3), arrangeGrob(qc2, qc3, ncol=2), heights=c(2.5/4, 1.5/4), ncol=1)
}
plot
})
output$initQC <- renderPlot({plotselection()})
#Set pre/post filtering table
row.names(data.meta.summ) <- c(
"<b>Number of cells</b>",
"<b>Median nCount_RNA</b>",
"<b>Minimum nCount_RNA</b>",
"<b>Maximum nCount_RNA</b>",
"<b>Median nFeature_RNA</b>",
"<b>Minimum nFeature_RNA</b>",
"<b>Maximum nFeature_RNA</b>",
"<b>Median percent.mt</b>",
"<b>Minimum percent.mt</b>",
"<b>Maximum percent.mt</b>"
)
colnames(data.meta.summ) <- c("Pre-filtering", "Post-filtering")
output$sum <- renderTable(data.meta.summ, spacing = "l", rownames=TRUE, digits=0, hover=TRUE, sanitize.text.function=function(x){x})
#Set npcs plot
output$npcs <- renderPlot(npcs$plot + theme(text = element_text(size=20)))
#Set PCA and feature plot event
output$pca <- renderPlot(pca + theme(text = element_text(size=20), legend.position = "none"))
featurePlotter <- eventReactive(input$search, {
if (input$gene == "") {
plot4 <- pca + theme(text = element_text(size=20), legend.position = "none")
}
if (input$gene != "") {
genen <- str_to_title(input$gene) %>% str_replace("MT-", mt.patt)
plot4 <- FeaturePlot(data, features = genen) + theme(text = element_text(size=20), legend.position = "none")
}
plot4
})
observeEvent(input$search, {
output$pca <- renderPlot({
plot4 <- featurePlotter()
plot4
})
})
})
})
mem_used()
smart.load <- function(rdata) {
e = local({load(rdata); environment()})
tools:::makeLazyLoadDB(e, obs)
}
mem_used()
smart.load <- function(rdata) {
e = local({load(rdata); environment()})
tools:::makeLazyLoadDB(e, obs)
}
mem_used()
rdata <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/data/CK114/pipeline_output/s01_qc_processing.Rdata"
mem_used()
smart.load(rdata)
smart.load <- function(rdata) {
e = local({load(rdata); environment()})
tools:::makeLazyLoadDB(e, "obs")
lazyLoad("obs")
}
smart.load(rdata)
mem_used()
npcs
e = local({load(rdata); environment()})
tools:::makeLazyLoadDB(e, "obs")
mem_used()
object.size(e)
lazyLoad("obs")
mem_used()
rdata
setwd("C:/Users/ellie/Onedrive/Saez/Pipeline/github/scRNA_analysis/qc_processing_report.io")
rsconnect::setAccountInfo(name='saezlab', token='F69194A154E522CA31405F7A5719702F', secret='7Lk1aZQZWd6Bo+MqcWkLlBj2irQuUxCFX1uGmna5')
deployApp()
library(rsconnect)
deployApp()
rsconnect::setAccountInfo(name='saezlab', token='F69194A154E522CA31405F7A5719702F', secret='7Lk1aZQZWd6Bo+MqcWkLlBj2irQuUxCFX1uGmna5')
deployApp()
rsconnect::setAccountInfo(name='saezlab',
token='F69194A154E522CA31405F7A5719702F',
secret='7Lk1aZQZWd6Bo+MqcWkLlBj2irQuUxCFX1uGmna5')
deployApp()
setwd("C:/Users/ellie/Onedrive/Saez/Pipeline/github/data/CK114/outs/filtered_feature_bc_matrix")
indir="C:/Users/ellie/Onedrive/Saez/Pipeline/github/data/CK114/outs/filtered_feature_bc_matrix"
setwd(~)
setwd("~")
input_data <- Read10X(data.dir = indir)
data <- CreateSeuratObject(counts = input_data,
project = sample,
min.cells = opt$mincells)
opt$input <- "C:/Users/ellie/Onedrive/Saez/Pipeline/github/data/CK114"
libs <- c("Seurat", "dplyr", "GetoptLong", "optparse", "magrittr", "stringr", "ggplot2", "webshot", "shiny", "gridExtra")
for (i in libs) {
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
install.packages(i)
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
stop(paste("Unable to install package: ", i, ". Please install manually and restart.", sep=""))
}
}
}
option_list <- list(
make_option(c("--input", "-i"), action="store", default=NULL, type='character',
help="Path to sample directory containing results of cellranger count [required]"),
make_option(c("--output", "-o"), action="store", default=NULL, type='character',
help="Path to desired output directory [default = input]"),
make_option(c("--mincells", "-c"), action="store", default=3, type='integer',
help="Feature filter: Minimum number of cells expressing a feature for it to be included [default = 3]"),
make_option(c("--minfeatures", "-n"), action="store", default=200, type='integer',
help="Cell filter: Minimum number of features a cell should express [default = 200]"),
make_option(c("--maxfeatures", "-x"), action="store", default=2500, type='integer',
help="Cell filter: Maximum number of features a cell should express [default = 2500]"),
make_option(c("--maxpercentmt", "-m"), action="store", default=5, type='numeric',
help="Cell filter: Maximum percentage of mitochondrial features a cell should express [default = 5]")
)
opt <- parse_args(OptionParser(option_list=option_list))
opt$input <- "C:/Users/ellie/Onedrive/Saez/Pipeline/github/data/CK114"
if (is.null(opt$output)) {
opt$output <- paste(opt$input, "/pipeline_output", sep="")
}
## Find filtered feature bc matrix directory
indir <- paste(opt$input, "/outs/filtered_feature_bc_matrix", sep="") %>% str_replace_all("/outs/filtered_feature_bc_matrix/outs/filtered_feature_bc_matrix", "/outs/filtered_feature_bc_matrix") %>% str_replace_all("/outs/filtered_feature_bc_matrix//outs/filtered_feature_bc_matrix", "/outs/filtered_feature_bc_matrix")
if (!file.exists(indir)) {
message(paste("ERROR: Input directory doesn't exist or doesn't contain cellranger output: ", indir, sep=""))
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
## Check other options
# Minimum number of cells per feature
if (!is.numeric(opt$mincells) | opt$mincells < 0 ) {
message("ERROR: Option --mincells/-c is not numeric or negative. Please supply a positive integer")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
if (opt$mincells > 10) {
warning("WARNING: Option --mincells/-c filter is HIGH, consider changing to a number less than 10")
}
if (opt$mincells < 1) {
warning("WARNING: Option --mincells/-c filter is LOW, consider changing to a number greater than 0")
}
# Minimum number of features per cell
if (!is.numeric(opt$minfeatures)) {
message("ERROR: Option --minfeatures/-n is not numeric")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
if (opt$minfeatures < 100) {
warning("WARNING: Option --minfeatures/-n filter is LOW, consider changing to a number greater than 100")
}
if (opt$minfeatures > 1000) {
warning("WARNING: Option --minfeatures/-n filter is HIGH, consider changing to a number less than 1000")
}
# Maximum number of features per cell
if (!is.numeric(opt$maxfeatures)) {
message("ERROR: Option --maxfeatures/-x is not numeric")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
if (opt$maxfeatures < 1000) {
warning("WARNING: Option --maxfeatures/-x filter is LOW, consider changing to a number greater than 1000")
}
if (opt$maxfeatures > 10000) {
warning("WARNING: Option --maxfeatures/-x filter is HIGH, consider changing to a number less than 10000")
}
if (opt$maxfeatures < opt$minfeatures) {
message("ERROR: Option --maxfeatures/-x is less than option --minfeatures/-n")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
# Maximum percentage of features from mitochondrial genes
if (!is.numeric(opt$maxpercentmt)) {
message("ERROR: Option --maxpercentmt/-m is not numeric")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
if (opt$maxpercentmt > 10) {
warning("WARNING: Option --maxfeatures/-x filter is HIGH, consider changing to a number less than 10")
}
if (opt$maxpercentmt < 2) {
warning("WARNING: Option --maxfeatures/-x filter is LOW, consider changing to a number greater than 1")
}
sample <- indir %>% str_replace_all("/outs/filtered_feature_bc_matrix", "") %>% basename()
# Read 10x data
input_data <- Read10X(data.dir = indir)
# Create Seurat object using mincells filter
data <- CreateSeuratObject(counts = input_data,
project = sample,
min.cells = opt$mincells)
mt.patt <- rownames(data)[grepl("MT-", rownames(data), ignore.case = TRUE)] %>% gsub("-.*", "-", .) %>% unique()
rownames(data)[grepl("MT-", rownames(data), ignore.case = TRUE)]
rownames(data)[grepl("^MT-", rownames(data), ignore.case = TRUE)]
load("C:/Users/ellie/OneDrive/GitHub/ExAC_nonTCGA_explore_all_v1/ExAC_nonTCGA_shiny_all_v1_carrierfreq_20180404.Rdata")
pms2 <- vv[vv$SYMBOL == "PMS2",]
View(pms2)
pms2 <- vv[vv$SYMBOL == "PMS2" & vv$Consequence == "missense_variant",]
setwd("C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/qc_processing_report.io")
library("rsconnect/")
library("rsconnect")
deployApp()
suppressWarnings(rm(i, data.meta, input_data, libs, initial.options, hashdir, joint.bcs))
