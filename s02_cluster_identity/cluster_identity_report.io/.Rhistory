}
if ( opt2$res >= 20 ) {
warning("WARNING: Option --res/-k is HIGH, consider changing to a number less than 20")
}
# Check if marker file is supplied and if it exists
if (opt2$markers != "" & !file.exists(opt2$markers)) {
message("ERROR: Markers file does not exist.")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
load(opt2$input)
script.dir <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/"
rm(data.meta.summ, i, indir, libs, pca, qc1, qc1.f, qc2, qc2.f, qc3, qc3.f)
if (is.na(opt2$npc)) {
opt2$npc <- npcs$npcs
}
# Find clusters based on set resolution
data <- FindClusters(data, resolution = opt2$res)
# Run UMAP
data <- RunUMAP(data, reduction = "pca", dims = 1:opt2$npc)
# Plot clusters
pca <- DimPlot(data, reduction = "umap")
all.markers <- FindAllMarkers(data, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
assign.identity <- function(seurat_object, markers){
#Find significant marker genes for each cluster
all.markers <- FindAllMarkers(seurat_object, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25, verbose = FALSE)
#Create one row for each cell.type label and marker gene
identity <- strsplit(markers$Markers, ",")
markers <- data.frame(Cell.Type = rep(markers$Cell.Type, sapply(identity, length)), Markers = unlist(identity))
#Make sure both gene names are in sentence case
markers$Markers <- str_to_sentence(markers$Markers)
all.markers$gene <- str_to_sentence(all.markers$gene)
#Merge identity on if available
add <- merge(markers, all.markers, by.x="Markers", by.y="gene", all.y=TRUE)
#Subset identity and cluster numbers
ids <- add %>% select("Cell.Type", "cluster") %>% unique()
#Gather identities if multiple per cluster
ids <- ids %>% group_by(cluster) %>% mutate(label=paste(Cell.Type, collapse=",")) %>% select(-Cell.Type) %>% unique()
#Remove "NA," values
ids$label <- str_replace_all(ids$label, "NA,", "")
#Convert "NA" character to NA
ids$label[ids$label == "NA"] <- NA
#Reorder
ids <- ids[order(ids$cluster),]
#Return
return(ids)
}
ngenes <- round(100/nlevels(all.markers$cluster))
top <- all.markers %>% group_by(cluster) %>% top_n(ngenes, avg_logFC)
heat <- DoHeatmap(object = data, features = top$gene, label = TRUE)
heat <- suppressWarnings(DoHeatmap(object = data, features = top$gene, label = TRUE))
opt2$markers
opt2$markers <- ""
script.dir
opt2$markers <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/marker.example.txt"
opt2$markers <- ""
opt2$markers <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/marker.example.txt"
opt2$markers
marker <- read.table(opt2$markers, sep="\t", header = TRUE)
ids <- assign.identity(data, marker)
View(ids)
ids[is.na(ids$label)] <- ids$cluster
is.na(ids$label)
ids$label[is.na(ids$label)] <- ids$cluster
ids$label[is.na(ids$label)]
is.na(ids$label)
ids <- assign.identity(data, marker)
ids$label[is.na(ids$label)]
ids$label[is.na(ids$label)] <- ids$cluster
ids$label <- ifelse(is.na(ids$label), ids$cluster, ids$label)
ids
View(ids)
is.numeric(id.label)
is.numeric(id$label)
is.numeric(ids$label)
ids$label <- c(NA, NA, NA, NA, NA, NA, NA, "Naive CD4+ T,Memory CD4+", NA, NA, NA, "NK", NA, NA)
test <- ids
View(test)
ids$label <- ifelse(is.na(ids$label), ids$cluster, ids$label)
ids <- test
View(ids)
ids$cluster
ids$cluster %>% as.numeric()
levels(ids$cluster)
ids$label <- ifelse(is.na(ids$label), levels(ids$cluster), ids$label)
new.ids <- ids$label
data <- RenameIdents(data, new.ids)
new.ids
names(new.ids) <- levels(data)
data <- RenameIdents(data, new.ids)
pca2 <- DimPlot(data, reduction = "umap")
pca2
DimPlot(data, reduction = "umap", label = TRUE, pt.size = 0.5)
DimPlot(data, reduction = "umap", label = TRUE, pt.size = 1)
DimPlot(data, reduction = "umap", label = TRUE, pt.size = 1, label.size = 6)
rm(test)
suppressWarnings(rm(ids, marker, top, new.ids, ngenes, option_list, rdata))
rm(clust)
rm(markers)
rdata <- paste(opt$output, "/s02_cluster_identity.Rdata", sep="")
rdata <- paste(opt2$output, "/s02_cluster_identity.Rdata", sep="")
save.image(rdata)
libs <- c("Seurat", "dplyr", "GetoptLong", "optparse", "magrittr", "stringr", "ggplot2", "webshot", "shiny", "clustree")
for (i in libs) {
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
install.packages(i)
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
stop(paste("Unable to install package: ", i, ". Please install manually and restart.", sep=""))
}
}
}
if (is.null(webshot:::find_phantom())) {
webshot::install_phantomjs()
}
script.dir <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/s01_qc_processing/"
source(paste(script.dir, "../source/source.R", sep=""))
## Get options
option_list <- list(
make_option(c("--input", "-i"), action="store", default="", type='character',
help="Path to Rdata output of s01_qc_processing.R (s01_qc_processing.Rdata) [required]"),
make_option(c("--output", "-o"), action="store", default=NULL, type='character',
help="Path to desired output directory [default = directory of input]"),
make_option(c("--npc", "-n"), action="store", default="", type='integer',
help="Number of principle components for clustering [default = see elbow plot in s01 report]"),
make_option(c("--res", "-k"), action="store", default=0.5, type='numeric',
help="Resolution for clustering (see clustree output in s01 report)[default = 0.5]"),
make_option(c("--markers", "-m"), action="store", default="", type='character',
help="Path to text file containing marker genes, see README for example")
)
opt2 <- parse_args(OptionParser(option_list=option_list))
## Check for input and output options
if (!grepl(".Rdata", opt2$input) | !file.exists(opt2$input)) {
message("ERROR: Input missing or not an .Rdata file, please specify input with --input, -i flags.")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
if (is.null(opt2$output)) {
opt2$output <- dirname(opt2$input)
}
# Generate warning messing if npcs or resolution is outside expected values
if ( !is.na(opt2$npc) & opt2$npc < 2 ) {
warning("WARNING: Option --npc/-n is LOW, consider changing to a number greater than 2")
}
if ( !is.na(opt2$npc) & opt2$npc >= 20 ) {
warning("WARNING: Option --npc/-n is HIGH, consider changing to a number less than 20")
}
if ( opt2$res < 0.1 ) {
warning("WARNING: Option --res/-k is LOW, consider changing to a number greater than 0.1")
}
if ( opt2$res >= 20 ) {
warning("WARNING: Option --res/-k is HIGH, consider changing to a number less than 20")
}
# Check if marker file is supplied and if it exists
if (opt2$markers != "" & !file.exists(opt2$markers)) {
message("ERROR: Markers file does not exist.")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
###############
## Load data ##
###############
opt2$input <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/data/CK114/pipeline_output/s01_qc_processing.Rdata"
# Load Rdata from input
load(opt2$input)
if (is.null(opt2$output)) {
opt2$output <- dirname(opt2$input)
}
script.dir <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/"
script.dir <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/s01_qc_processing"
rm(data.meta.summ, i, indir, libs, pca, qc1, qc1.f, qc2, qc2.f, qc3, qc3.f)
if (is.na(opt2$npc)) {
opt2$npc <- npcs$npcs
}
# Find clusters based on set resolution
data <- FindClusters(data, resolution = opt2$res)
# Run UMAP
data <- RunUMAP(data, reduction = "pca", dims = 1:opt2$npc)
# Plot clusters
pca <- DimPlot(data, reduction = "umap")
all.markers <- FindAllMarkers(data, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25, verbose = FALSE)
ngenes <- round(100/nlevels(all.markers$cluster))
top <- all.markers %>% group_by(cluster) %>% top_n(ngenes, avg_logFC)
heat <- suppressWarnings(DoHeatmap(object = data, features = top$gene, label = TRUE))
if (opt2$markers != "") {
# Read in marker genes
marker <- read.table(opt2$markers, sep="\t", header = TRUE)
# Assign cluster number to cell identities
ids <- assign.identity(data, marker)
# If found, apply cell type to cluster
ids$label <- ifelse(is.na(ids$label), levels(ids$cluster), ids$label)
# Set new ids
new.ids <- ids$label
names(new.ids) <- levels(data)
data <- RenameIdents(data, new.ids)
# Replot with new cell identities
pca2 <- DimPlot(data, reduction = "umap", label = TRUE, pt.size = 1, label.size = 6)
}
script.dir
libs <- c("Seurat", "dplyr", "GetoptLong", "optparse", "magrittr", "stringr", "ggplot2", "webshot", "shiny", "clustree")
for (i in libs) {
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
install.packages(i)
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
stop(paste("Unable to install package: ", i, ". Please install manually and restart.", sep=""))
}
}
}
script.dir <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/s02_cluster_identity/"
## Source functions
source(paste(script.dir, "../source/source.R", sep=""))
## Get options
option_list <- list(
make_option(c("--input", "-i"), action="store", default="", type='character',
help="Path to Rdata output of s01_qc_processing.R (s01_qc_processing.Rdata) [required]"),
make_option(c("--output", "-o"), action="store", default=NULL, type='character',
help="Path to desired output directory [default = directory of input]"),
make_option(c("--npc", "-n"), action="store", default="", type='integer',
help="Number of principle components for clustering [default = see elbow plot in s01 report]"),
make_option(c("--res", "-k"), action="store", default=0.5, type='numeric',
help="Resolution for clustering (see clustree output in s01 report)[default = 0.5]"),
make_option(c("--markers", "-m"), action="store", default="", type='character',
help="Path to text file containing marker genes, see README for example")
)
opt2 <- parse_args(OptionParser(option_list=option_list))
## Check for input and output options
if (!grepl(".Rdata", opt2$input) | !file.exists(opt2$input)) {
message("ERROR: Input missing or not an .Rdata file, please specify input with --input, -i flags.")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
if (is.null(opt2$output)) {
opt2$output <- dirname(opt2$input)
}
# Generate warning messing if npcs or resolution is outside expected values
if ( !is.na(opt2$npc) & opt2$npc < 2 ) {
warning("WARNING: Option --npc/-n is LOW, consider changing to a number greater than 2")
}
if ( !is.na(opt2$npc) & opt2$npc >= 20 ) {
warning("WARNING: Option --npc/-n is HIGH, consider changing to a number less than 20")
}
if ( opt2$res < 0.1 ) {
warning("WARNING: Option --res/-k is LOW, consider changing to a number greater than 0.1")
}
if ( opt2$res >= 20 ) {
warning("WARNING: Option --res/-k is HIGH, consider changing to a number less than 20")
}
# Check if marker file is supplied and if it exists
if (opt2$markers != "" & !file.exists(opt2$markers)) {
message("ERROR: Markers file does not exist.")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
###############
## Load data ##
###############
opt2$input <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/data/CK114/pipeline_output/s01_qc_processing.Rdata"
if (is.null(opt2$output)) {
opt2$output <- dirname(opt2$input)
}
script.dir <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/s02_cluster_identity/"
load(opt2$input)
script.dir <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/s02_cluster_identity/"
rm(data.meta.summ, i, indir, libs, pca, qc1, qc1.f, qc2, qc2.f, qc3, qc3.f)
if (is.na(opt2$npc)) {
opt2$npc <- npcs$npcs
}
data <- FindClusters(data, resolution = opt2$res, verbose = FALSE)
data <- RunUMAP(data, reduction = "pca", dims = 1:opt2$npc, verbose = FALSE)
pca <- DimPlot(data, reduction = "umap")
all.markers <- suppressMessages(FindAllMarkers(data, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25, verbose = FALSE))
ngenes <- round(100/nlevels(all.markers$cluster))
top <- all.markers %>% group_by(cluster) %>% suppressMessages(top_n(ngenes, avg_logFC))
heat <- suppressWarnings(DoHeatmap(object = data, features = top$gene, label = TRUE))
script.dir
opt2$markers <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/s02_cluster_identity/marker.example.txt"
if (opt2$markers != "") {
# Read in marker genes
marker <- read.table(opt2$markers, sep="\t", header = TRUE)
# Assign cluster number to cell identities
ids <- assign.identity(data, marker)
# If found, apply cell type to cluster
ids$label <- ifelse(is.na(ids$label), levels(ids$cluster), ids$label)
# Set new ids
new.ids <- ids$label
names(new.ids) <- levels(data)
data <- RenameIdents(data, new.ids)
# Replot with new cell identities
pca2 <- DimPlot(data, reduction = "umap", label = TRUE, pt.size = 1, label.size = 6)
}
suppressWarnings(rm(ids, marker, top, new.ids, ngenes, option_list, rdata))
dir.create(opt2$output, showWarnings = FALSE)
rdata <- paste(opt2$output, "/s02_cluster_identity.Rdata", sep="")
save.image(rdata)
save.image(rdata)
if (is.null(opt2$output)) {
opt2$output <- dirname(opt2$input)
}
opt2$output
opt2$output <- dirname(opt2$input)
opt2$output
rdata <- paste(opt2$output, "/s02_cluster_identity.Rdata", sep="")
save.image(rdata)
all.markers <- FindAllMarkers(data, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25, verbose = FALSE)
identity <- strsplit(markers$Markers, ",")
markers <- read.table(opt2$markers, sep="\t", header = TRUE)
identity <- strsplit(markers$Markers, ",")
markers <- data.frame(Cell.Type = rep(markers$Cell.Type, sapply(identity, length)), Markers = unlist(identity))
markers$Markers <- str_to_sentence(markers$Markers)
all.markers$gene <- str_to_sentence(all.markers$gene)
add <- merge(markers, all.markers, by.x="Markers", by.y="gene", all.y=TRUE)
ids <- add %>% select("Cell.Type", "cluster") %>% unique()
ids <- ids %>% group_by(cluster) %>% mutate(label=paste(Cell.Type, collapse=",")) %>% select(-Cell.Type) %>% unique()
ids$label <- str_replace_all(ids$label, "NA,", "")
ids$label[ids$label == "NA"] <- NA
ids <- ids[order(ids$cluster),]
return(ids)
ids$label <- ifelse(is.na(ids$label), levels(ids$cluster), ids$label)
new.ids <- ids$label
names(new.ids) <- levels(data)
data <- RenameIdents(data, new.ids)
pca2 <- DimPlot(data, reduction = "umap", label = TRUE, pt.size = 1, label.size = 6)
if (opt2$markers != "") {
# Read in marker genes
marker <- read.table(opt2$markers, sep="\t", header = TRUE)
# Assign cluster number to cell identities
#ids <- assign.identity(data, marker)
# If found, apply cell type to cluster
ids$label <- ifelse(is.na(ids$label), levels(ids$cluster), ids$label)
# Set new ids
new.ids <- ids$label
names(new.ids) <- levels(data)
data <- RenameIdents(data, new.ids)
# Replot with new cell identities
pca2 <- DimPlot(data, reduction = "umap", label = TRUE, pt.size = 1, label.size = 6)
}
if (opt2$markers != "") {
# Read in marker genes
marker <- read.table(opt2$markers, sep="\t", header = TRUE)
# Assign cluster number to cell identities
ids <- assign.identity(data, marker)
# If found, apply cell type to cluster
ids$label <- ifelse(is.na(ids$label), levels(ids$cluster), ids$label)
# Set new ids
new.ids <- ids$label
names(new.ids) <- levels(data)
data <- RenameIdents(data, new.ids)
# Replot with new cell identities
pca2 <- DimPlot(data, reduction = "umap", label = TRUE, pt.size = 1, label.size = 6)
}
heat
ngenes <- round(100/nlevels(all.markers$cluster))
top <- all.markers %>% group_by(cluster) %>% suppressMessages(top_n(ngenes, avg_logFC))
length(top)
nrow(top)
View(all.markers)
top <- all.markers %>% group_by(cluster) %>% top_n(ngenes, avg_logFC)
top <- all.markers %>% group_by(cluster) %>% suppressMessages(top_n(ngenes, avg_logFC))
top <- all.markers %>% group_by(cluster) %>% top_n(ngenes, avg_logFC)
top <- all.markers %>% group_by(cluster) %>% suppressMessages(top_n(ngenes, avg_logFC))
all.markers %>% top_n(2, avg_logFC)
all.markers %>% suppressMessages(top_n(2, avg_logFC))
top <- all.markers %>% group_by(cluster) %>% top_n(ngenes, avg_logFC)
heat <- suppressWarnings(DoHeatmap(object = data, features = top$gene, label = TRUE))
heat <- suppressWarnings(DoHeatmap(object = data, features = top$gene, label = TRUE))
all.markers <- suppressMessages(FindAllMarkers(data, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25, verbose = FALSE))
ngenes <- round(100/nlevels(all.markers$cluster))
top <- all.markers %>% group_by(cluster) %>% top_n(ngenes, avg_logFC)
heat <- suppressWarnings(DoHeatmap(object = data, features = top$gene, label = TRUE))
libs <- c("Seurat", "dplyr", "GetoptLong", "optparse", "magrittr", "stringr", "ggplot2", "webshot", "shiny", "clustree")
for (i in libs) {
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
install.packages(i)
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
stop(paste("Unable to install package: ", i, ". Please install manually and restart.", sep=""))
}
}
}
script.dir <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/s02_cluster_identity/"
source(paste(script.dir, "../source/source.R", sep=""))
option_list <- list(
make_option(c("--input", "-i"), action="store", default="", type='character',
help="Path to Rdata output of s01_qc_processing.R (s01_qc_processing.Rdata) [required]"),
make_option(c("--output", "-o"), action="store", default=NULL, type='character',
help="Path to desired output directory [default = directory of input]"),
make_option(c("--npc", "-n"), action="store", default="", type='integer',
help="Number of principle components for clustering [default = see elbow plot in s01 report]"),
make_option(c("--res", "-k"), action="store", default=0.5, type='numeric',
help="Resolution for clustering (see clustree output in s01 report)[default = 0.5]"),
make_option(c("--markers", "-m"), action="store", default="", type='character',
help="Path to text file containing marker genes, see README for example")
)
opt2 <- parse_args(OptionParser(option_list=option_list))
## Check for input and output options
if (!grepl(".Rdata", opt2$input) | !file.exists(opt2$input)) {
message("ERROR: Input missing or not an .Rdata file, please specify input with --input, -i flags.")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
if (is.null(opt2$output)) {
opt2$output <- dirname(opt2$input)
}
# Generate warning messing if npcs or resolution is outside expected values
if ( !is.na(opt2$npc) & opt2$npc < 2 ) {
warning("WARNING: Option --npc/-n is LOW, consider changing to a number greater than 2")
}
if ( !is.na(opt2$npc) & opt2$npc >= 20 ) {
warning("WARNING: Option --npc/-n is HIGH, consider changing to a number less than 20")
}
if ( opt2$res < 0.1 ) {
warning("WARNING: Option --res/-k is LOW, consider changing to a number greater than 0.1")
}
if ( opt2$res >= 20 ) {
warning("WARNING: Option --res/-k is HIGH, consider changing to a number less than 20")
}
# Check if marker file is supplied and if it exists
if (opt2$markers != "" & !file.exists(opt2$markers)) {
message("ERROR: Markers file does not exist.")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
###############
## Load data ##
###############
opt2$input <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/data/CK114/pipeline_output/s01_qc_processing.Rdata"
if (is.null(opt2$output)) {
opt2$output <- dirname(opt2$input)
}
script.dir
opt2$markers <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/s02_cluster_identity/marker.example.txt"
opt2$output
if (is.null(opt2$output)) {
opt2$output <- dirname(opt2$input)
}
load(opt2$input)
script.dir <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/s02_cluster_identity/"
rm(data.meta.summ, i, indir, libs, pca, qc1, qc1.f, qc2, qc2.f, qc3, qc3.f)
if (is.na(opt2$npc)) {
opt2$npc <- npcs$npcs
}
# Find clusters based on set resolution
data <- FindClusters(data, resolution = opt2$res, verbose = FALSE)
# Run UMAP
data <- RunUMAP(data, reduction = "pca", dims = 1:opt2$npc, verbose = FALSE)
# Plot clusters
pca <- DimPlot(data, reduction = "umap")
pca
all.markers <- suppressMessages(FindAllMarkers(data, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25, verbose = FALSE))
# Find number of genes needed per cluster to achieve 100 genes total for heatmap
ngenes <- round(100/nlevels(all.markers$cluster))
# Gather 100 genes total from top of each cluster
top <- all.markers %>% group_by(cluster) %>% top_n(ngenes, avg_logFC)
# Plot heatmap
heat <- suppressWarnings(DoHeatmap(object = data, features = top$gene, label = TRUE))
heat
if (opt2$markers != "") {
# Read in marker genes
marker <- read.table(opt2$markers, sep="\t", header = TRUE)
# Assign cluster number to cell identities
ids <- assign.identity(data, marker)
# If found, apply cell type to cluster
ids$label <- ifelse(is.na(ids$label), levels(ids$cluster), ids$label)
# Set new ids
new.ids <- ids$label
names(new.ids) <- levels(data)
data <- RenameIdents(data, new.ids)
# Replot with new cell identities
pca2 <- DimPlot(data, reduction = "umap", label = TRUE, pt.size = 1, label.size = 6)
}
suppressWarnings(rm(ids, marker, top, new.ids, ngenes, option_list, rdata))
# Create output directory
dir.create(opt2$output, showWarnings = FALSE)
# Save image
rdata <- paste(opt2$output, "/s02_cluster_identity.Rdata", sep="")
save.image(rdata)
if (is.null(opt2$output)) {
opt2$output <- dirname(opt2$input)
}
rdata <- paste(opt2$output, "/s02_cluster_identity.Rdata", sep="")
save.image(rdata)
opt2$output <- dirname(opt2$input)
rdata <- paste(opt2$output, "/s02_cluster_identity.Rdata", sep="")
save.image(rdata)
load("C:/Users/ellie/OneDrive/Saez/Pipeline/github/data/ERS2921927_20200806/pipeline_output/s02_cluster_identity.Rdata")
load("C:/Users/ellie/OneDrive/Saez/Maurice_Stent/results/integration.de.RData")
rm(anchors, control, stent)
rm(anchors, control, stent, assign.identity, get_npcs)
save.image("C:/Users/ellie/OneDrive/Saez/Maurice_Stent/results/integration.de.RData")
load("C:/Users/ellie/OneDrive/Saez/Maurice_Stent/results/integration.de.RData")
write.csv(stent.response, "C:/Users/ellie/OneDrive/Saez/Maurice_Stent/results/de.stentvscontrol.20200916.csv")
View(avg)
View(stent.response)
stent.response <- merge(stent.response, avg, by = "row.names", all.x=TRUE, all.y=FALSE)
View(stent.response)
colnames(stent.response)[7:8] <- c("log1p_avg_cases", "log1p_avg_controls")
write.csv(stent.response, "C:/Users/ellie/OneDrive/Saez/Maurice_Stent/results/de.stentvscontrol.20200916.csv")
data
Idents(data)
library(dplyr)
library(tidyr)
library(ggplot2)
library(magrittr)
library(Seurat)
library(cowplot)
Idents(data)
DefaultAssay(data) <- "RNA"
Idents(data)
setwd("C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/s01_qc_processing/qc_processing_report.io")
library(rsconnect)
DeployApp()
deployApp()
deployApp()
memory.size()
ibrary(pryr)
library(pryr)
mem_used()
mem_change("C:/Users/ellie/OneDrive/Saez/Turgey_Kidney/data/Monica_run/TS1/pipeline_output/s01_qc_processing.Rdata")
mem_change(load("C:/Users/ellie/OneDrive/Saez/Turgey_Kidney/data/Monica_run/TS1/pipeline_output/s01_qc_processing.Rdata"))
setwd("C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/s02_cluster_identity/cluster_identity_report.io")
deployApp()
