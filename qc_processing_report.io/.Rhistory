tools:::makeLazyLoadDB(e, "obs")
lazyLoad("obs")
}
smart.load(rdata)
mem_used()
npcs
e = local({load(rdata); environment()})
tools:::makeLazyLoadDB(e, "obs")
mem_used()
object.size(e)
lazyLoad("obs")
mem_used()
rdata
setwd("C:/Users/ellie/Onedrive/Saez/Pipeline/github/scRNA_analysis/qc_processing_report.io")
rsconnect::setAccountInfo(name='saezlab', token='F69194A154E522CA31405F7A5719702F', secret='7Lk1aZQZWd6Bo+MqcWkLlBj2irQuUxCFX1uGmna5')
deployApp()
library(rsconnect)
deployApp()
rsconnect::setAccountInfo(name='saezlab', token='F69194A154E522CA31405F7A5719702F', secret='7Lk1aZQZWd6Bo+MqcWkLlBj2irQuUxCFX1uGmna5')
deployApp()
rsconnect::setAccountInfo(name='saezlab',
token='F69194A154E522CA31405F7A5719702F',
secret='7Lk1aZQZWd6Bo+MqcWkLlBj2irQuUxCFX1uGmna5')
deployApp()
setwd("C:/Users/ellie/Onedrive/Saez/Pipeline/github/data/CK114/outs/filtered_feature_bc_matrix")
indir="C:/Users/ellie/Onedrive/Saez/Pipeline/github/data/CK114/outs/filtered_feature_bc_matrix"
setwd(~)
setwd("~")
input_data <- Read10X(data.dir = indir)
data <- CreateSeuratObject(counts = input_data,
project = sample,
min.cells = opt$mincells)
opt$input <- "C:/Users/ellie/Onedrive/Saez/Pipeline/github/data/CK114"
libs <- c("Seurat", "dplyr", "GetoptLong", "optparse", "magrittr", "stringr", "ggplot2", "webshot", "shiny", "gridExtra")
for (i in libs) {
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
install.packages(i)
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
stop(paste("Unable to install package: ", i, ". Please install manually and restart.", sep=""))
}
}
}
option_list <- list(
make_option(c("--input", "-i"), action="store", default=NULL, type='character',
help="Path to sample directory containing results of cellranger count [required]"),
make_option(c("--output", "-o"), action="store", default=NULL, type='character',
help="Path to desired output directory [default = input]"),
make_option(c("--mincells", "-c"), action="store", default=3, type='integer',
help="Feature filter: Minimum number of cells expressing a feature for it to be included [default = 3]"),
make_option(c("--minfeatures", "-n"), action="store", default=200, type='integer',
help="Cell filter: Minimum number of features a cell should express [default = 200]"),
make_option(c("--maxfeatures", "-x"), action="store", default=2500, type='integer',
help="Cell filter: Maximum number of features a cell should express [default = 2500]"),
make_option(c("--maxpercentmt", "-m"), action="store", default=5, type='numeric',
help="Cell filter: Maximum percentage of mitochondrial features a cell should express [default = 5]")
)
opt <- parse_args(OptionParser(option_list=option_list))
opt$input <- "C:/Users/ellie/Onedrive/Saez/Pipeline/github/data/CK114"
if (is.null(opt$output)) {
opt$output <- paste(opt$input, "/pipeline_output", sep="")
}
## Find filtered feature bc matrix directory
indir <- paste(opt$input, "/outs/filtered_feature_bc_matrix", sep="") %>% str_replace_all("/outs/filtered_feature_bc_matrix/outs/filtered_feature_bc_matrix", "/outs/filtered_feature_bc_matrix") %>% str_replace_all("/outs/filtered_feature_bc_matrix//outs/filtered_feature_bc_matrix", "/outs/filtered_feature_bc_matrix")
if (!file.exists(indir)) {
message(paste("ERROR: Input directory doesn't exist or doesn't contain cellranger output: ", indir, sep=""))
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
## Check other options
# Minimum number of cells per feature
if (!is.numeric(opt$mincells) | opt$mincells < 0 ) {
message("ERROR: Option --mincells/-c is not numeric or negative. Please supply a positive integer")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
if (opt$mincells > 10) {
warning("WARNING: Option --mincells/-c filter is HIGH, consider changing to a number less than 10")
}
if (opt$mincells < 1) {
warning("WARNING: Option --mincells/-c filter is LOW, consider changing to a number greater than 0")
}
# Minimum number of features per cell
if (!is.numeric(opt$minfeatures)) {
message("ERROR: Option --minfeatures/-n is not numeric")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
if (opt$minfeatures < 100) {
warning("WARNING: Option --minfeatures/-n filter is LOW, consider changing to a number greater than 100")
}
if (opt$minfeatures > 1000) {
warning("WARNING: Option --minfeatures/-n filter is HIGH, consider changing to a number less than 1000")
}
# Maximum number of features per cell
if (!is.numeric(opt$maxfeatures)) {
message("ERROR: Option --maxfeatures/-x is not numeric")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
if (opt$maxfeatures < 1000) {
warning("WARNING: Option --maxfeatures/-x filter is LOW, consider changing to a number greater than 1000")
}
if (opt$maxfeatures > 10000) {
warning("WARNING: Option --maxfeatures/-x filter is HIGH, consider changing to a number less than 10000")
}
if (opt$maxfeatures < opt$minfeatures) {
message("ERROR: Option --maxfeatures/-x is less than option --minfeatures/-n")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
# Maximum percentage of features from mitochondrial genes
if (!is.numeric(opt$maxpercentmt)) {
message("ERROR: Option --maxpercentmt/-m is not numeric")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
}
if (opt$maxpercentmt > 10) {
warning("WARNING: Option --maxfeatures/-x filter is HIGH, consider changing to a number less than 10")
}
if (opt$maxpercentmt < 2) {
warning("WARNING: Option --maxfeatures/-x filter is LOW, consider changing to a number greater than 1")
}
sample <- indir %>% str_replace_all("/outs/filtered_feature_bc_matrix", "") %>% basename()
# Read 10x data
input_data <- Read10X(data.dir = indir)
# Create Seurat object using mincells filter
data <- CreateSeuratObject(counts = input_data,
project = sample,
min.cells = opt$mincells)
mt.patt <- rownames(data)[grepl("MT-", rownames(data), ignore.case = TRUE)] %>% gsub("-.*", "-", .) %>% unique()
rownames(data)[grepl("MT-", rownames(data), ignore.case = TRUE)]
rownames(data)[grepl("^MT-", rownames(data), ignore.case = TRUE)]
load("C:/Users/ellie/OneDrive/GitHub/ExAC_nonTCGA_explore_all_v1/ExAC_nonTCGA_shiny_all_v1_carrierfreq_20180404.Rdata")
pms2 <- vv[vv$SYMBOL == "PMS2",]
View(pms2)
pms2 <- vv[vv$SYMBOL == "PMS2" & vv$Consequence == "missense_variant",]
libs <- c("Seurat", "dplyr", "GetoptLong", "optparse", "magrittr", "stringr", "ggplot2", "webshot", "shiny", "gridExtra")
for (i in libs) {
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
install.packages(i)
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
stop(paste("Unable to install package: ", i, ". Please install manually and restart.", sep=""))
}
}
}
if (is.null(webshot:::find_phantom())) {
webshot::install_phantomjs()
}
script_dir <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis_hashtag/"
getwd()
script_dir <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis_hashtag/"
opt$input <- "C:/Users/ellie/OneDrive/Saez/Turgey_Kidney/data/Monica_run/TS1/"
source(paste(script.dir, "/source/source.R", sep=""))
script.dir <- "C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis_hashtag/"
rm(script_dir)
script.dir <- dirname(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
libs <- c("Seurat", "dplyr", "GetoptLong", "optparse", "magrittr", "stringr", "ggplot2", "webshot", "shiny", "gridExtra")
for (i in libs) {
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
install.packages(i)
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
stop(paste("Unable to install package: ", i, ". Please install manually and restart.", sep=""))
}
}
}
if (is.null(webshot:::find_phantom())) {
webshot::install_phantomjs()
}
## Find script directory
initial.options <- commandArgs(trailingOnly = FALSE)
source(paste(script.dir, "/source/source.R", sep=""))
option_list <- list(
make_option(c("--input", "-i"), action="store", default=NULL, type='character',
help="Path to sample directory containing results of cellranger count [required]"),
make_option(c("--output", "-o"), action="store", default=NULL, type='character',
help="Path to desired output directory [default = input]"),
make_option(c("--mincells", "-c"), action="store", default=3, type='integer',
help="Feature filter: Minimum number of cells expressing a feature for it to be included [default = 3]"),
make_option(c("--minfeatures", "-n"), action="store", default=200, type='integer',
help="Cell filter: Minimum number of features a cell should express [default = 200]"),
make_option(c("--maxfeatures", "-x"), action="store", default=2500, type='integer',
help="Cell filter: Maximum number of features a cell should express [default = 2500]"),
make_option(c("--maxpercentmt", "-m"), action="store", default=5, type='numeric',
help="Cell filter: Maximum percentage of mitochondrial features a cell should express [default = 5]"),
make_option(c("--hashtag", "-r"), action="store", default=NULL, type='character',
help="Path to rds UMI hashtag matrix")
)
opt <- parse_args(OptionParser(option_list=option_list))
opt$input <- "C:/Users/ellie/OneDrive/Saez/Turgey_Kidney/data/Monica_run/TS1/"
opt$hashtag <- "C:/Users/ellie/OneDrive/Saez/Turgey_Kidney/data/Monica_run/HT01_TS1"
indir <- paste(opt$input, "/outs/filtered_feature_bc_matrix", sep="") %>% str_replace_all("/outs/filtered_feature_bc_matrix/outs/filtered_feature_bc_matrix", "/outs/filtered_feature_bc_matrix") %>% str_replace_all("/outs/filtered_feature_bc_matrix//outs/filtered_feature_bc_matrix", "/outs/filtered_feature_bc_matrix")
file.exists(indir)
dir.exists(indir)
indir
indir <- "C:/Users/ellie/OneDrive/Saez/Turgey_Kidney/data/Monica_run/TS1"
dir.exists(indir)
file.exists(indir)
if (!is.null(opt$hashtag)) {
hashdir <- paste(opt$hashtag, "/umi_count", sep="") %>% str_replace_all("/umi_count/umi_count", "/umi_count") %>% str_replace_all("/umi_count//umi_count", "/umi_count")
file.exists(opt$hashtag)
}
file.exists(hashdir)
umis <- Read10X(data.dir = hashdir, gene.column = 1)
umis[rownames(umis)[1:4],]
umis
colnames(umi)
colnames(umis)
sample <- indir %>% str_replace_all("/outs/filtered_feature_bc_matrix", "") %>% basename()
input_data <- Read10X(data.dir = indir)
data <- CreateSeuratObject(counts = input_data,
project = sample,
min.cells = opt$mincells)
data
umis
joint.bcs <- intersect(colnames(data), colnames(umis))
joint.bcs <- intersect(colnames(input_data), colnames(umis))
input_data <- Read10X(data.dir = indir)
!is.null(opt$hashtag
)
umis <- Read10X(data.dir = hashdir, gene.column = 1)
joint.bcs <- intersect(colnames(input_data), colnames(umis))
colnames(input_data)
colnames(umis) <- paste(colnames(umis), "-1", sep="") %>% str_replace_all("-1-1", "-1")
joint.bcs <- intersect(colnames(input_data), colnames(umis))
input_data <- input_data[,joint.bcs]
umis <- as.matrix(umis[,joint.bcs])
data <- CreateSeuratObject(counts = input_data,
project = sample,
min.cells = opt$mincells)
mt.patt <- rownames(data)[grepl("^MT-", rownames(data), ignore.case = TRUE)] %>% gsub("-.*", "-", .) %>% unique()
# Create percent.mt metric
data[["percent.mt"]] <- PercentageFeatureSet(data, pattern = mt.patt)
# Create QC plots
qc1 <- VlnPlot(data, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, cols="grey")
qc2 <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "percent.mt", cols="steelblue4")
qc3 <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", cols="steelblue4")
# Subset meta data
data.meta <- data@meta.data
# Create summary table of meta data
data.meta.summ <- summarise(data.meta, ncells = length(orig.ident),
med_nCount_RNA = median(nCount_RNA),
min_nCount_RNA = min(nCount_RNA),
max_nCount_RNA = max(nCount_RNA),
med_nFeature_RNA = median(nFeature_RNA),
min_nFeature_RNA = min(nFeature_RNA),
max_nFeature_RNA = max(nFeature_RNA),
med_percent.mt = median(percent.mt),
min_percent.mt = min(percent.mt),
max_percent.mt = max(percent.mt)) %>% t() %>% as.data.frame()
colnames(data.meta.summ) <- "pre-filtering"
###############
## Filtering ##
###############
data <- data[,(data$nFeature_RNA >= opt$minfeatures) & (data$nFeature_RNA <= opt$maxfeatures) & (data$percent.mt < opt$maxpercentmt)]
# Subset meta data
data.meta <- data@meta.data
# Create summary table of meta data
data.meta.summ$'post-filtering' <- summarise(data.meta, ncells = length(orig.ident),
med_nCount_RNA = median(nCount_RNA),
min_nCount_RNA = min(nCount_RNA),
max_nCount_RNA = max(nCount_RNA),
med_nFeature_RNA = median(nFeature_RNA),
min_nFeature_RNA = min(nFeature_RNA),
max_nFeature_RNA = max(nFeature_RNA),
med_percent.mt = median(percent.mt),
min_percent.mt = min(percent.mt),
max_percent.mt = max(percent.mt)) %>% t()
# Create post filter QC plots
qc1.f <- VlnPlot(data, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, cols="lightskyblue3")
qc2.f <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "percent.mt", cols="steelblue4")
qc3.f <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", cols="steelblue4")
qc3.f
data <- HTODemux(data, assay="HTO", positive.quantile = 0.99)
data[["HTO"]] <- CreateAssayObject(counts = umis)
umis <- as.matrix(umis[,joint.bcs])
input_data <- input_data[,joint.bcs]
data <- CreateSeuratObject(counts = input_data,
project = sample,
min.cells = opt$mincells)
data <- CreateSeuratObject(counts = input_data,
project = sample,
min.cells = opt$mincells)
# Add HTO data
data[["HTO"]] <- CreateAssayObject(counts = umis)
mt.patt <- rownames(data)[grepl("^MT-", rownames(data), ignore.case = TRUE)] %>% gsub("-.*", "-", .) %>% unique()
# Create percent.mt metric
data[["percent.mt"]] <- PercentageFeatureSet(data, pattern = mt.patt)
# Create QC plots
qc1 <- VlnPlot(data, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, cols="grey")
qc2 <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "percent.mt", cols="steelblue4")
qc3 <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", cols="steelblue4")
# Subset meta data
data.meta <- data@meta.data
# Create summary table of meta data
data.meta.summ <- summarise(data.meta, ncells = length(orig.ident),
med_nCount_RNA = median(nCount_RNA),
min_nCount_RNA = min(nCount_RNA),
max_nCount_RNA = max(nCount_RNA),
med_nFeature_RNA = median(nFeature_RNA),
min_nFeature_RNA = min(nFeature_RNA),
max_nFeature_RNA = max(nFeature_RNA),
med_percent.mt = median(percent.mt),
min_percent.mt = min(percent.mt),
max_percent.mt = max(percent.mt)) %>% t() %>% as.data.frame()
colnames(data.meta.summ) <- "pre-filtering"
###############
## Filtering ##
###############
data <- data[,(data$nFeature_RNA >= opt$minfeatures) & (data$nFeature_RNA <= opt$maxfeatures) & (data$percent.mt < opt$maxpercentmt)]
# Subset meta data
data.meta <- data@meta.data
# Create summary table of meta data
data.meta.summ$'post-filtering' <- summarise(data.meta, ncells = length(orig.ident),
med_nCount_RNA = median(nCount_RNA),
min_nCount_RNA = min(nCount_RNA),
max_nCount_RNA = max(nCount_RNA),
med_nFeature_RNA = median(nFeature_RNA),
min_nFeature_RNA = min(nFeature_RNA),
max_nFeature_RNA = max(nFeature_RNA),
med_percent.mt = median(percent.mt),
min_percent.mt = min(percent.mt),
max_percent.mt = max(percent.mt)) %>% t()
# Create post filter QC plots
qc1.f <- VlnPlot(data, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, cols="lightskyblue3")
qc2.f <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "percent.mt", cols="steelblue4")
qc3.f <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", cols="steelblue4")
qc3.f
View(data.meta.summ)
data <- NormalizeData(data, assay = "HTO", normalization.method = "CLR")
data <- HTODemux(data, assay="HTO", positive.quantile = 0.99)
table(pbmc.hashtag$HTO_classification.global)
table(data$HTO_classification.global)
umis
umis <- Read10X(data.dir = hashdir, gene.column = 1)
umis
rowSums(umis)
rowSums(as.data.frame(umis))
umis <- umis[rowSums(as.data.frame(umis)) > 100 & row.names(umis) != "unmapped",]
umis
# Add -1 to header
colnames(umis) <- paste(colnames(umis), "-1", sep="") %>% str_replace_all("-1-1", "-1")
# Find intersection
joint.bcs <- intersect(colnames(input_data), colnames(umis))
# Subset RNA and HTO counts by the joint cell barcodes
input_data <- input_data[,joint.bcs]
umis <- as.matrix(umis[,joint.bcs])
# Create Seurat Object
data <- CreateSeuratObject(counts = input_data,
project = sample,
min.cells = opt$mincells)
# Add HTO data
data[["HTO"]] <- CreateAssayObject(counts = umis)
mt.patt <- rownames(data)[grepl("^MT-", rownames(data), ignore.case = TRUE)] %>% gsub("-.*", "-", .) %>% unique()
# Create percent.mt metric
data[["percent.mt"]] <- PercentageFeatureSet(data, pattern = mt.patt)
# Create QC plots
qc1 <- VlnPlot(data, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, cols="grey")
qc2 <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "percent.mt", cols="steelblue4")
qc3 <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", cols="steelblue4")
# Subset meta data
data.meta <- data@meta.data
# Create summary table of meta data
data.meta.summ <- summarise(data.meta, ncells = length(orig.ident),
med_nCount_RNA = median(nCount_RNA),
min_nCount_RNA = min(nCount_RNA),
max_nCount_RNA = max(nCount_RNA),
med_nFeature_RNA = median(nFeature_RNA),
min_nFeature_RNA = min(nFeature_RNA),
max_nFeature_RNA = max(nFeature_RNA),
med_percent.mt = median(percent.mt),
min_percent.mt = min(percent.mt),
max_percent.mt = max(percent.mt)) %>% t() %>% as.data.frame()
colnames(data.meta.summ) <- "pre-filtering"
###############
## Filtering ##
###############
data <- data[,(data$nFeature_RNA >= opt$minfeatures) & (data$nFeature_RNA <= opt$maxfeatures) & (data$percent.mt < opt$maxpercentmt)]
# Subset meta data
data.meta <- data@meta.data
# Create summary table of meta data
data.meta.summ$'post-filtering' <- summarise(data.meta, ncells = length(orig.ident),
med_nCount_RNA = median(nCount_RNA),
min_nCount_RNA = min(nCount_RNA),
max_nCount_RNA = max(nCount_RNA),
med_nFeature_RNA = median(nFeature_RNA),
min_nFeature_RNA = min(nFeature_RNA),
max_nFeature_RNA = max(nFeature_RNA),
med_percent.mt = median(percent.mt),
min_percent.mt = min(percent.mt),
max_percent.mt = max(percent.mt)) %>% t()
# Create post filter QC plots
qc1.f <- VlnPlot(data, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, cols="lightskyblue3")
qc2.f <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "percent.mt", cols="steelblue4")
qc3.f <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", cols="steelblue4")
data <- NormalizeData(data, assay = "HTO", normalization.method = "CLR")
data <- HTODemux(data, assay="HTO", positive.quantile = 0.99)
table(data$HTO_classification.global)
histogram(table(data$HTO_classification.global))
hist(table(data$HTO_classification.global))
barplot(table(data$HTO_classification.global))
barplot(table(data$HTO_classification.global), col="darkblue")
barplot(table(data$HTO_classification.global), col="blue")
barplot(table(data$HTO_classification.global), col="lightblue")
barplot(table(data$HTO_classification.global), ylab="Cell count", col="lightblue")
barplot(table(data$HTO_classification.global), ylab="Cell count", col=c("darkblue", "grey","lightblue"))
table(data$HTO_classification.global)$Doublet
table(data$HTO_classification.global)[1]
table(data$HTO_classification.global)[2]
table(data$HTO_classification.global)[3]
db.count <- cbind(
table(data$HTO_classification.global)[1],
table(data$HTO_classification.global)[3],
table(data$HTO_classification.global)[2])
doublet <- barplot(db.count, ylab="Cell count", col=c("darkblue", "grey","lightblue"))
db.count <- rbind(
table(data$HTO_classification.global)[1],
table(data$HTO_classification.global)[3],
table(data$HTO_classification.global)[2])
doublet <- barplot(db.count, ylab="Cell count", col=c("darkblue", "grey","lightblue"))
db.count <- cbind(
table(data$HTO_classification.global)[1],
table(data$HTO_classification.global)[3],
table(data$HTO_classification.global)[2])
View(db.count)
db.count <- table(data$HTO_classification.global)
doublet <- barplot(db.count, ylab="Cell count", col=c("darkblue", "grey","lightblue"))
db.count <- table(data$HTO_classification.global) %>% as.data.frame()
db.count$Var1 <- as.factor(db.count$Var1, levels=c("Doublet", "Singlet", "Negative"))
db.count$Var1 <- factor(db.count$Var1, levels=c("Doublet", "Singlet", "Negative"))
doublet <- barplot(db.count, ylab="Cell count", col=c("darkblue","lightblue", "grey"))
ggplot(db.count, aes(x=Var1, y=Freq)) +
geom_bar() +
scale_colour_manual(c("darkblue","lightblue", "grey"))
ggplot(db.count, aes(x=Var1, y=Freq)) +
geom_bar(stat="identity") +
scale_colour_manual(c("darkblue","lightblue", "grey"))
ggplot(db.count, aes(x=Var1, y=Freq)) +
geom_bar(stat="identity") +
scale_fill_manual(c("darkblue","lightblue", "grey"))
ggplot(db.count, aes(x=Var1, y=Freq)) +
geom_bar(stat="identity", aes(fill=c("darkblue","lightblue", "grey")))
ggplot(db.count, aes(x=Var1, y=Freq, colour=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(c("darkblue","lightblue", "grey"))
ggplot(db.count, aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(c("darkblue","lightblue", "grey"))
ggplot(db.count, aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("darkblue","lightblue", "grey"))
ggplot(db.count, aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("darkblue","lightblue", "grey")) +
xlab("") +
ylab("Cell Count")
ggplot(db.count, aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("darkblue","lightblue", "grey")) +
xlab("") +
ylab("Cell Count") +
theme(legend.position="none")
Idents(data) = 'HTO_classification.global'
VlnPlot(data, features = 'nCount_RNA', pt.size = 0.1)
Idents(data) = 'HTO_maxID'
RidgePlot(data, assay = 'HTO', features = rownames(umis), ncol = 1)
data <- subset(data, idents = 'Singlet')
Idents(data) <- 'HTO_classification.global'
data <- subset(data, idents = 'Singlet')
data
RidgePlot(data, assay = 'HTO', features = rownames(umis), ncol = 1) + scale_fill_brewer(palette="blues")
Idents(data) <- 'HTO_maxID'
RidgePlot(data, assay = 'HTO', features = rownames(umis), ncol = 1) + scale_fill_brewer(palette="blues")
RidgePlot(data, assay = 'HTO', features = rownames(umis), ncol = 1) + scale_fill_brewer(palette="Blues")
RidgePlot(data, assay = 'HTO', features = rownames(umis), ncol = 1) + scale_fill_brewer(palette="PuBuGn")
RidgePlot(data, assay = 'HTO', features = rownames(umis), ncol = 1)[1]
RidgePlot(data, assay = 'HTO', features = rownames(umis), ncol = 1)[[1]]
RidgePlot(data, assay = 'HTO', features = rownames(umis), ncol = 1)
ridge <- RidgePlot(data, assay = 'HTO', features = rownames(umis), ncol = 1)
RidgePlot(data, assay = 'HTO', features = rownames(umis), ncol = 1, cols="PuBuGn")
scale_fill_manual(palette="PuBuGn")
scale_fill_manual(palette="PuBuGn", values = 1:4)
RidgePlot(data, assay = 'HTO', features = rownames(umis), ncol = 1, cols=scale_fill_manual(palette="PuBuGn"))
nrow(umis)
RidgePlot(data, assay = 'HTO', features = rownames(umis), ncol = 1, cols=scale_fill_manual(palette="PuBuGn", n=nrow(umis)))
ridge <- RidgePlot(data, assay = 'HTO', features = rownames(umis), ncol = 1)
ridge
lapply(ridge, function(x) {x + scale_fill_brewer(palette="PuBuGn")})
brewer.pal(n=5,"PuBuGn")
library(RColorBrewer)
brewer.pal(n=5,"PuBuGn")
nrow(umis)
brewer.pal(n=nrow(umis),"PuBuGn")
RidgePlot(data, assay = 'HTO', features = rownames(umis), ncol = 1, cols=brewer.pal(n=nrow(umis),"PuBuGn"))
RidgePlot(data, assay = 'HTO', features = rownames(umis), ncol = 1, cols=brewer.pal(n=nrow(umis),"PuBuGn"))
rm(i, data.meta, input_data, libs, initial.options)
rm(i, data.meta, input_data, libs, initial.options, hashdir, joint.bcs)
ridge
doublet <- ggplot(db.count, aes(x=Var1, y=Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("darkblue","lightblue", "grey")) +
xlab("") +
ylab("Cell Count") +
theme(legend.position="none")
doublet
opt$output
if (is.null(opt$output)) {
opt$output <- paste(opt$input, "/pipeline_output", sep="")
}
rdata <- paste(opt$output, "/s01_qc_processing.Rdata", sep="")
dir.create(opt$output, showWarnings = FALSE)
save.image(rdata)
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/qc_processing_report.io')
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/qc_processing_report.io')
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis/qc_processing_report.io')
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis_hashtag/qc_processing_report.io')
"Expression Counts Over Hashtags"
"Number of Doublets Identified"
runApp('C:/Users/ellie/OneDrive/Saez/Pipeline/github/scRNA_analysis_hashtag/qc_processing_report.io')
